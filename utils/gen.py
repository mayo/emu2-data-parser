#!/usr/bin/env python
#cat tags.txt| python gen.py > emu2_tags.h

"""
Generate emu2_tags.h file from a list of cleaned up tag names (without <>).
"""

import os.path
import sys
import mmh3

SCRIPTNAME = os.path.basename(__file__)

SEED = 42
PREFIX = "EMU2_TAG_"

NONE_HASH = 0xffffffff

# Keeps a list of hahes mapped to corresponding tag names
hashes = {NONE_HASH: "None"}

for raw_tag in sys.stdin.readlines():
    tag = raw_tag.strip()

    if tag == "":
        continue

    if tag.startswith("<"):
        print("Tags should consist of only tag names, without angle brackets.")
        exit(1)

    hash = mmh3.hash(tag, SEED) & 0xffffffff

    if (hash in hashes and hashes.get(hash) != tag):
        print("Hash collision: tag {:s} has the same hash as tag {:s}".format(tag, hashes.get(hash)), file=sys.stderr)
        exit(1)

    hashes[hash] = tag

def gen_enum(hash:str, tag:str, pad=4) -> str:
    return "{:s}{:s}{:s} = 0x{:08x},".format(" " * pad, PREFIX, tag, hash)

header = """// Autogenerated file, do not edit. To regenerate this file, please use {:s}

#ifndef EMU2_TAGS
#define EMU2_TAGS

typedef enum {{
"""

footer = """
} Emu2Tag;

#endif
"""

print(header.format(SCRIPTNAME))

print(gen_enum(NONE_HASH, hashes.pop(NONE_HASH)))
print()

for h, t in hashes.items():
    print(gen_enum(h, t))

print(footer)